{
    "project": {
        "name": "jscom",
        "description": "<h2>jscom</h2> <p>Reflective component framework for NodeJS development</p>",
        "version": "1.0.0",
        "url": "https://github.com/shen-lin/jscom",
        "logo": "",
        "navs": [
            {
                "name": "Home",
                "url": ""
            },
            {
                "name": "Document",
                "url": ""
            },
            {
                "name": "About",
                "url": ""
            }
        ]
    },
    "files": {
        "src\\util\\String.js": {
            "name": "src\\util\\String.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\Adaptor.js": {
            "name": "src\\Adaptor.js",
            "modules": {},
            "classes": {
                "JSCOM.Adaptor": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Component.js": {
            "name": "src\\Component.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\Composite.js": {
            "name": "src\\Composite.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\JSCOMRuntime.js": {
            "name": "src\\JSCOMRuntime.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "JSCOM.Adaptor": {
            "name": "JSCOM.Adaptor",
            "shortname": "JSCOM.Adaptor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Adaptor.js",
            "line": 1,
            "author": "Shen Lin"
        }
    },
    "classitems": [
        {
            "file": "src\\util\\String.js",
            "line": 3,
            "description": "JSCOM.string.format(\"{0} + {1} = {2}\", 5, 5, 10);",
            "class": "JSCOM.Adaptor"
        },
        {
            "file": "src\\Adaptor.js",
            "line": 76,
            "description": "Crosscutting function is always executed, before exiting the control flow of\nthe original function (I.e. before return / exception handling).",
            "class": "JSCOM.Adaptor"
        },
        {
            "file": "src\\Adaptor.js",
            "line": 111,
            "description": "Execution depends on the success of the original function. If the original function\nthrows exception. The crosscutting function is not executed.",
            "class": "JSCOM.Adaptor"
        },
        {
            "file": "src\\Adaptor.js",
            "line": 135,
            "description": "Only executed when an exception is thrown. The adaptor functions acts as exception handling process.",
            "class": "JSCOM.Adaptor"
        },
        {
            "file": "src\\Component.js",
            "line": 10,
            "description": "MetaInterface: Acquisitor Access API",
            "class": ""
        },
        {
            "file": "src\\Component.js",
            "line": 20,
            "description": "MetaInterface: Interfaces Access API",
            "class": ""
        },
        {
            "file": "src\\Component.js",
            "line": 29,
            "description": "MetaInterface: Metadata",
            "class": ""
        },
        {
            "file": "src\\Composite.js",
            "line": 6,
            "description": "Child Composite API",
            "class": ""
        },
        {
            "file": "src\\Composite.js",
            "line": 50,
            "description": "Component API",
            "class": ""
        },
        {
            "file": "src\\Composite.js",
            "line": 167,
            "description": "Expose API",
            "class": ""
        },
        {
            "file": "src\\Composite.js",
            "line": 254,
            "description": "Binding API",
            "class": ""
        },
        {
            "file": "src\\JSCOMRuntime.js",
            "line": 16,
            "description": "Composite Access API",
            "class": ""
        },
        {
            "file": "src\\JSCOMRuntime.js",
            "line": 37,
            "description": "Adaptor API",
            "class": ""
        },
        {
            "file": "src\\JSCOMRuntime.js",
            "line": 41,
            "params": [],
            "class": ""
        },
        {
            "file": "src\\JSCOMRuntime.js",
            "line": 63,
            "params": [
                {
                    "name": "sId",
                    "description": "Id of the injection",
                    "type": "String"
                },
                {
                    "name": "oAdvices",
                    "description": "Indicating the location of this adaptor function in the ordered list of applied adaptor functions. E.g.\n\t[\n\t\t{id: adaptorId, fn: adaptorFn_1, type: JSCOM.Adaptor.Type.BEFORE}, \n\t\t{id: adaptorId, fn: adaptorFn_2, type: JSCOM.Adaptor.Type.AFTER}, \n\t\t{id: adaptorId, fn: adaptorFn_3, type: JSCOM.Adaptor.Type.BEFORE} \n\t]",
                    "type": "Array"
                },
                {
                    "name": "oScope",
                    "description": "A JSON object with data structure:  \n\t{\n\t\tinclude: [{string}...],\n\t\texclude: [{string}...],\n\t}\n\t \n\tEach string in the array is a regular expression that describe the component classes that should be \n\tincluded / excluded for this adaptor injection. The regular expression contains the following characters for \n\tpattern matching:\n\t \n\t'*' Match zero or more characters \n\t'**' Match zero or more directories \n\t'?' Match a single character",
                    "type": "Object"
                }
            ],
            "class": ""
        },
        {
            "file": "src\\JSCOMRuntime.js",
            "line": 223,
            "description": "Return the components and composites in the given composite.",
            "class": ""
        },
        {
            "file": "src\\JSCOMRuntime.js",
            "line": 233,
            "description": "Component Access API",
            "class": ""
        },
        {
            "file": "src\\JSCOMRuntime.js",
            "line": 244,
            "description": "Component Repository Access API",
            "class": ""
        },
        {
            "file": "src\\JSCOMRuntime.js",
            "line": 270,
            "description": "Transactional Configuration API",
            "class": ""
        }
    ],
    "warnings": [
        {
            "message": "param name/type/descript missing",
            "line": " src\\JSCOMRuntime.js:41"
        },
        {
            "message": "Missing item type\nJSCOM.string.format(\"{0} + {1} = {2}\", 5, 5, 10);",
            "line": " src\\util\\String.js:3"
        },
        {
            "message": "Missing item type\nCrosscutting function is always executed, before exiting the control flow of\nthe original function (I.e. before return / exception handling).",
            "line": " src\\Adaptor.js:76"
        },
        {
            "message": "Missing item type\nExecution depends on the success of the original function. If the original function\nthrows exception. The crosscutting function is not executed.",
            "line": " src\\Adaptor.js:111"
        },
        {
            "message": "Missing item type\nOnly executed when an exception is thrown. The adaptor functions acts as exception handling process.",
            "line": " src\\Adaptor.js:135"
        },
        {
            "message": "Missing item type\nMetaInterface: Acquisitor Access API",
            "line": " src\\Component.js:10"
        },
        {
            "message": "Missing item type\nMetaInterface: Interfaces Access API",
            "line": " src\\Component.js:20"
        },
        {
            "message": "Missing item type\nMetaInterface: Metadata",
            "line": " src\\Component.js:29"
        },
        {
            "message": "Missing item type\nChild Composite API",
            "line": " src\\Composite.js:6"
        },
        {
            "message": "Missing item type\nComponent API",
            "line": " src\\Composite.js:50"
        },
        {
            "message": "Missing item type\nExpose API",
            "line": " src\\Composite.js:167"
        },
        {
            "message": "Missing item type\nBinding API",
            "line": " src\\Composite.js:254"
        },
        {
            "message": "Missing item type\nComposite Access API",
            "line": " src\\JSCOMRuntime.js:16"
        },
        {
            "message": "Missing item type\nAdaptor API",
            "line": " src\\JSCOMRuntime.js:37"
        },
        {
            "message": "Missing item type",
            "line": " src\\JSCOMRuntime.js:41"
        },
        {
            "message": "Missing item type",
            "line": " src\\JSCOMRuntime.js:63"
        },
        {
            "message": "Missing item type\nReturn the components and composites in the given composite.",
            "line": " src\\JSCOMRuntime.js:223"
        },
        {
            "message": "Missing item type\nComponent Access API",
            "line": " src\\JSCOMRuntime.js:233"
        },
        {
            "message": "Missing item type\nComponent Repository Access API",
            "line": " src\\JSCOMRuntime.js:244"
        },
        {
            "message": "Missing item type\nTransactional Configuration API",
            "line": " src\\JSCOMRuntime.js:270"
        }
    ]
}